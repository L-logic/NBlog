<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zp.blog.dao.BlogMapper">
    <resultMap id="BaseResultMap" type="com.zp.blog.domain.Blog">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="first_picture" jdbcType="VARCHAR" property="firstPicture"/>
        <result column="flag" jdbcType="VARCHAR" property="flag"/>
        <result column="views" jdbcType="INTEGER" property="views"/>
        <result column="appreciate_open" jdbcType="BIT" property="appreciateOpen"/>
        <result column="share_statement" jdbcType="BIT" property="shareStatement"/>
        <result column="comment_open" jdbcType="BIT" property="commentOpen"/>
        <result column="published" jdbcType="BIT" property="published"/>
        <result column="recommend" jdbcType="BIT" property="recommend"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="comment_count" jdbcType="INTEGER" property="commentCount"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="type_id" jdbcType="INTEGER" property="typeId"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
    </resultMap>
    <resultMap id="BlogResultMap" type="com.zp.blog.domain.Blog">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
        <result column="first_picture" jdbcType="VARCHAR" property="firstPicture"/>
        <result column="flag" jdbcType="VARCHAR" property="flag"/>
        <result column="views" jdbcType="INTEGER" property="views"/>
        <result column="appreciate_open" jdbcType="BIT" property="appreciateOpen"/>
        <result column="share_statement" jdbcType="BIT" property="shareStatement"/>
        <result column="comment_open" jdbcType="BIT" property="commentOpen"/>
        <result column="published" jdbcType="BIT" property="published"/>
        <result column="recommend" jdbcType="BIT" property="recommend"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="comment_count" jdbcType="INTEGER" property="commentCount"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <association column="type_id" javaType="Type" property="type">
            <id property="id" column="tyId" jdbcType="INTEGER"/>
            <result property="name" column="tyName" jdbcType="VARCHAR"/>
        </association>
        <association column="user_id" javaType="UserInfo" property="userInfo">
            <id property="id" column="uid"/>
            <result property="nickname" column="nickname"/>
            <result property="headPortrait" column="head_portrait"/>
            <result property="status" column="status"/>
        </association>
        <collection property="tags" ofType="Tag">
            <id property="id" column="tid" jdbcType="INTEGER"/>
            <result property="name" column="tname" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zp.blog.domain.Blog">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, title, first_picture, flag, views, appreciate_open, share_statement, comment_open, 
    published, recommend, create_time, update_time, comment_count, type_id, user_id
  </sql>
    <sql id="Blob_Column_List">
    content
  </sql>
    <select id="selectHotBlogs" resultMap="BlogResultMap">
        select id, title from t_blog order by views DESC limit 4
    </select>
    <select id="selectYears" resultType="java.lang.String">
         SELECT DATE_FORMAT(update_time,'%Y') AS YEAR FROM t_blog GROUP BY YEAR order by year DESC
    </select>
    <select id="selectBlogsByYear" resultMap="BlogResultMap">
        select id, title,flag,update_time from t_blog where DATE_FORMAT(update_time,'%Y') = #{year} order by update_time
    </select>
    <select id="selectByTypeId" resultMap="BlogResultMap">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.id as tyId, ty.name as tyName,
        u.id as uid, u.nickname, u.head_portrait, u.status
        from t_blog b
        left join t_type ty on b.type_id = ty.id
        left join t_user u on b.user_id = u.id
        where b.published = true and b.type_id = #{typeId} order by b.update_time DESC
    </select>
    <select id="selectByTagId" resultMap="BlogResultMap">
        select b.id, b.title,b.content, b.first_picture, b.flag, b.appreciate_open, b.share_statement,
        b.comment_open, b.published, b.views, b.create_time, b.comment_count, b.recommend, b.update_time, b.description,
        ty.id as tyId, ty.name as tyName,
        u.id as uid, u.nickname, u.head_portrait, u.status,
        t.id as tid, t.name as tname
        from t_blog b
        left join t_type ty on b.type_id = ty.id
        left join t_user u on b.user_id = u.id
        left join t_blog_tag bt on b.id = bt.blog_id
        left join t_tag t on bt.tag_id = t.id
        where b.published = true and b.id in (select blog_id from t_blog_tag where tag_id = #{tagId})
    </select>
    <select id="search" resultMap="BlogResultMap">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        u.id as uid, u.nickname, u.head_portrait, u.status
        from t_blog b
        left join t_user u on b.user_id = u.id
        where b.published = true and  (b.title like #{searchContent} or b.content like #{searchContent})
    </select>
    <select id="selectByRecommend" resultMap="BlogResultMap">
        select id, title from t_blog where recommend = true limit 8
    </select>
    <select id="selectAllFront" resultMap="BlogResultMap">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.id as tyId, ty.name as tyName,
        u.id as uid, u.nickname, u.head_portrait, u.status
        from t_blog b
        left join t_user u on b.user_id = u.id
        left join t_type ty on b.type_id = ty.id
        where b.published = true order by b.update_time DESC
    </select>
    <select id="selectAll" resultMap="BlogResultMap">
        select b.id, b.title, b.recommend, b.published, b.update_time, ty.id as tyId, ty.name as tyName
        from t_blog b
        left join t_type ty on b.type_id = ty.id
        <where>
            <if test="title != null">
                and title like #{title}
            </if>
            <if test="typeId != 0">
                and type_id = #{typeId}
            </if>
            <if test="recommend != null">
                and recommend = #{recommend}
            </if>
        </where>
    </select>
    <select id="selectById" resultMap="BlogResultMap">
        select b.id, b.title,b.content, b.first_picture, b.flag, b.appreciate_open, b.share_statement,
        b.comment_open, b.published, b.views, b.create_time, b.comment_count, b.recommend, b.update_time, b.description,
        ty.id as tyId, ty.name as tyName,
        u.id as uid, u.nickname, u.head_portrait, u.status,
        t.id as tid, t.name as tname
        from t_blog b
        left join t_type ty on b.type_id = ty.id
        left join t_user u on b.user_id = u.id
        left join t_blog_tag bt on b.id = bt.blog_id
        left join t_tag t on bt.tag_id = t.id
        where b.id = #{id}
    </select>
    <select id="selectByIdOfFront" resultMap="BlogResultMap">
        select b.id, b.title,b.content, b.first_picture, b.flag, b.appreciate_open, b.share_statement,
        b.comment_open, b.published, b.views, b.create_time, b.comment_count, b.recommend, b.update_time,
        ty.id as tyId, ty.name as tyName,
        u.id as uid, u.nickname, u.head_portrait, u.status,
        t.id as tid, t.name as tname
        from t_blog b
        left join t_type ty on b.type_id = ty.id
        left join t_user u on b.user_id = u.id
        left join t_blog_tag bt on b.id = bt.blog_id
        left join t_tag t on bt.tag_id = t.id
        where b.id = #{id}
    </select>
    <select id="selectByExampleWithBLOBs" parameterType="com.zp.blog.domain.BlogExample" resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.zp.blog.domain.BlogExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_blog
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByBlogIdForTagAndBlog">
    delete from t_blog_tag where blog_id = #{id}
  </delete>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_blog
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteByExample" parameterType="com.zp.blog.domain.BlogExample">
        delete from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insertBlogAndTag">
    insert into t_blog_tag(tag_id, blog_id) values (#{tagId}, #{blogId})
  </insert>
    <insert id="insert" parameterType="com.zp.blog.domain.Blog" useGeneratedKeys="true" keyProperty="id">
    insert into t_blog (title, first_picture,
      flag, views, appreciate_open, 
      share_statement, comment_open, published, 
      recommend, create_time, update_time, 
      comment_count, description, type_id, user_id,
      content)
    values (#{title,jdbcType=VARCHAR}, #{firstPicture,jdbcType=VARCHAR},
      #{flag,jdbcType=VARCHAR}, #{views,jdbcType=INTEGER}, #{appreciateOpen,jdbcType=BIT}, 
      #{shareStatement,jdbcType=BIT}, #{commentOpen,jdbcType=BIT}, #{published,jdbcType=BIT}, 
      #{recommend,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{commentCount,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}, #{type.id,jdbcType=INTEGER}, #{userInfo.id,jdbcType=BIGINT},
      #{content,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.zp.blog.domain.Blog">
        insert into t_blog
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="firstPicture != null">
                first_picture,
            </if>
            <if test="flag != null">
                flag,
            </if>
            <if test="views != null">
                views,
            </if>
            <if test="appreciateOpen != null">
                appreciate_open,
            </if>
            <if test="shareStatement != null">
                share_statement,
            </if>
            <if test="commentOpen != null">
                comment_open,
            </if>
            <if test="published != null">
                published,
            </if>
            <if test="recommend != null">
                recommend,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="commentCount != null">
                comment_count,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="firstPicture != null">
                #{firstPicture,jdbcType=VARCHAR},
            </if>
            <if test="flag != null">
                #{flag,jdbcType=VARCHAR},
            </if>
            <if test="views != null">
                #{views,jdbcType=INTEGER},
            </if>
            <if test="appreciateOpen != null">
                #{appreciateOpen,jdbcType=BIT},
            </if>
            <if test="shareStatement != null">
                #{shareStatement,jdbcType=BIT},
            </if>
            <if test="commentOpen != null">
                #{commentOpen,jdbcType=BIT},
            </if>
            <if test="published != null">
                #{published,jdbcType=BIT},
            </if>
            <if test="recommend != null">
                #{recommend,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentCount != null">
                #{commentCount,jdbcType=INTEGER},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.zp.blog.domain.BlogExample" resultType="java.lang.Long">
        select count(*) from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectCountByTypeId" resultType="int">
        select count(*) from t_blog where type_id = #{typeId}
    </select>
    <update id="updateViews">
        update t_blog set views = #{views} where id = #{id}
    </update>
    <update id="updateByExampleSelective" parameterType="map">
        update t_blog
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.firstPicture != null">
                first_picture = #{record.firstPicture,jdbcType=VARCHAR},
            </if>
            <if test="record.flag != null">
                flag = #{record.flag,jdbcType=VARCHAR},
            </if>
            <if test="record.views != null">
                views = #{record.views,jdbcType=INTEGER},
            </if>
            <if test="record.appreciateOpen != null">
                appreciate_open = #{record.appreciateOpen,jdbcType=BIT},
            </if>
            <if test="record.shareStatement != null">
                share_statement = #{record.shareStatement,jdbcType=BIT},
            </if>
            <if test="record.commentOpen != null">
                comment_open = #{record.commentOpen,jdbcType=BIT},
            </if>
            <if test="record.published != null">
                published = #{record.published,jdbcType=BIT},
            </if>
            <if test="record.recommend != null">
                recommend = #{record.recommend,jdbcType=BIT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.commentCount != null">
                comment_count = #{record.commentCount,jdbcType=INTEGER},
            </if>
            <if test="record.typeId != null">
                type_id = #{record.typeId,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=BIGINT},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update t_blog
        set id = #{record.id,jdbcType=BIGINT},
        title = #{record.title,jdbcType=VARCHAR},
        first_picture = #{record.firstPicture,jdbcType=VARCHAR},
        flag = #{record.flag,jdbcType=VARCHAR},
        views = #{record.views,jdbcType=INTEGER},
        appreciate_open = #{record.appreciateOpen,jdbcType=BIT},
        share_statement = #{record.shareStatement,jdbcType=BIT},
        comment_open = #{record.commentOpen,jdbcType=BIT},
        published = #{record.published,jdbcType=BIT},
        recommend = #{record.recommend,jdbcType=BIT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        comment_count = #{record.commentCount,jdbcType=INTEGER},
        type_id = #{record.typeId,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=BIGINT},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_blog
        set id = #{record.id,jdbcType=BIGINT},
        title = #{record.title,jdbcType=VARCHAR},
        first_picture = #{record.firstPicture,jdbcType=VARCHAR},
        flag = #{record.flag,jdbcType=VARCHAR},
        views = #{record.views,jdbcType=INTEGER},
        appreciate_open = #{record.appreciateOpen,jdbcType=BIT},
        share_statement = #{record.shareStatement,jdbcType=BIT},
        comment_open = #{record.commentOpen,jdbcType=BIT},
        published = #{record.published,jdbcType=BIT},
        recommend = #{record.recommend,jdbcType=BIT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        comment_count = #{record.commentCount,jdbcType=INTEGER},
        type_id = #{record.typeId,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=BIGINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.zp.blog.domain.Blog">
        update t_blog
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="firstPicture != null">
                first_picture = #{firstPicture,jdbcType=VARCHAR},
            </if>
            <if test="flag != null">
                flag = #{flag,jdbcType=VARCHAR},
            </if>
            <if test="views != null">
                views = #{views,jdbcType=INTEGER},
            </if>
            <if test="appreciateOpen != null">
                appreciate_open = #{appreciateOpen,jdbcType=BIT},
            </if>
            <if test="shareStatement != null">
                share_statement = #{shareStatement,jdbcType=BIT},
            </if>
            <if test="commentOpen != null">
                comment_open = #{commentOpen,jdbcType=BIT},
            </if>
            <if test="published != null">
                published = #{published,jdbcType=BIT},
            </if>
            <if test="recommend != null">
                recommend = #{recommend,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentCount != null">
                comment_count = #{commentCount,jdbcType=INTEGER},
            </if>
            <if test="type.id != null">
                type_id = #{type.id ,jdbcType=INTEGER},
            </if>
            <if test="userInfo.id != null">
                user_id = #{userInfo.id,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zp.blog.domain.Blog">
    update t_blog
    set title = #{title,jdbcType=VARCHAR},
      first_picture = #{firstPicture,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=VARCHAR},
      views = #{views,jdbcType=INTEGER},
      appreciate_open = #{appreciateOpen,jdbcType=BIT},
      share_statement = #{shareStatement,jdbcType=BIT},
      comment_open = #{commentOpen,jdbcType=BIT},
      published = #{published,jdbcType=BIT},
      recommend = #{recommend,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      comment_count = #{commentCount,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.zp.blog.domain.Blog">
    update t_blog
    set title = #{title,jdbcType=VARCHAR},
      first_picture = #{firstPicture,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=VARCHAR},
      views = #{views,jdbcType=INTEGER},
      appreciate_open = #{appreciateOpen,jdbcType=BIT},
      share_statement = #{shareStatement,jdbcType=BIT},
      comment_open = #{commentOpen,jdbcType=BIT},
      published = #{published,jdbcType=BIT},
      recommend = #{recommend,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      comment_count = #{commentCount,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

</mapper>